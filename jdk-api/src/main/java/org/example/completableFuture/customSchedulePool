
## completableFuture需要自定义线程池
按照业务身份标识管理线程池：
定义枚举类
```
package com.jd.jr.cf.bt.mkt.pop.common.enums;

import com.jd.jr.cf.bt.mkt.pop.common.thread.DiscardRejectedPolicy;

import java.util.concurrent.RejectedExecutionHandler;

/**
 * @author liulei318
 * @version 1.0
 * @project bt-mkt-pop
 * @description
 * @date 2024/7/5 14:49:35
 */
public enum ScheduleTaskPoolEnum {

    VENDOR_CROWD_OFFLINE_TASK("vendorCrowdIdsOffLineTask",Runtime.getRuntime().availableProcessors(),30,"bt-mkt-pop-offline-task-%d",new DiscardRejectedPolicy(),"店铺群离线任务跑数",true)
    ;


    private String businessScene;

    private Integer corePoolSize;

    private Integer maximumPoolSize;

    private String threadName;

    private RejectedExecutionHandler rejectedExecutionHandler;

    private String desc;

    private Boolean effect;


     ScheduleTaskPoolEnum(
            String businessScene,
            Integer corePoolSize,
            Integer maximumPoolSize,
            String threadName,
            RejectedExecutionHandler rejectedExecutionHandler,
            String desc,
            Boolean effect) {
        this.businessScene = businessScene;
        this.corePoolSize = corePoolSize;
        this.maximumPoolSize = maximumPoolSize;
        this.threadName = threadName;
        this.rejectedExecutionHandler = rejectedExecutionHandler;
        this.desc = desc;
        this.effect = effect;
    }

    public String getBusinessScene() {
        return businessScene;
    }

    public Integer getCorePoolSize() {
        return corePoolSize;
    }

    public Integer getMaximumPoolSize() {
        return maximumPoolSize;
    }

    public String getThreadName() {
        return threadName;
    }

    public RejectedExecutionHandler getRejectedExecutionHandler() {
        return rejectedExecutionHandler;
    }

    public String getDesc() {
        return desc;
    }

    public Boolean getEffect() {
        return effect;
    }
}

```

```
package com.jd.jr.cf.bt.mkt.pop.common.utils;

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.jd.jr.cf.bt.mkt.pop.common.enums.ScheduleTaskPoolEnum;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import javax.annotation.PreDestroy;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.RunnableScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;

/**
 * @author liulei318
 * @version 1.0
 * @project bt-mkt-pop
 * @description
 * @date 2024/7/5 15:06:46
 */
@Component
@Slf4j
public class LocalSchedulePoolUtil {
    private static Map<String,CustomScheduledExecutor> scheduledPools = new ConcurrentHashMap<>();

    static{
        ScheduleTaskPoolEnum[] values = ScheduleTaskPoolEnum.values();
        for (ScheduleTaskPoolEnum value : values) {
            if (!value.getEffect()) {
                continue;
            }
            CustomScheduledExecutor customScheduledExecutor = new CustomScheduledExecutor(value);
            customScheduledExecutor.setMaximumPoolSize(value.getMaximumPoolSize());
            scheduledPools.put(value.getBusinessScene(),customScheduledExecutor);
        }
        log.info("threadPool.size:{}",scheduledPools.size());
    }

    public static class CustomScheduledExecutor extends ScheduledThreadPoolExecutor{
        private ScheduleTaskPoolEnum scheduleTaskPoolEnum;
        public CustomScheduledExecutor(ScheduleTaskPoolEnum scheduleTaskPoolEnum) {
            super(scheduleTaskPoolEnum.getCorePoolSize(),new ThreadFactoryBuilder().setNameFormat(scheduleTaskPoolEnum.getThreadName()).build(),scheduleTaskPoolEnum.getRejectedExecutionHandler());
            this.scheduleTaskPoolEnum=scheduleTaskPoolEnum;
        }
    }

    public static CustomScheduledExecutor getScheduledExecutorRouter(ScheduleTaskPoolEnum scheduleTaskPoolEnum){
        log.info("[业务身份获取线程池]scheduleTaskPoolEnum.businessScene:{}",scheduleTaskPoolEnum.getBusinessScene());
        return scheduledPools.get(scheduleTaskPoolEnum.getBusinessScene());
    }

    @PreDestroy
    public void destroyLocalThreadPool(){
        if (!CollectionUtils.isEmpty(scheduledPools)) {
            for (CustomScheduledExecutor value : scheduledPools.values()) {
                value.shutdown();
            }
        }
    }
}

```

```
@Slf4j
public class DiscardRejectedPolicy extends ThreadPoolExecutor.DiscardPolicy {
    @Override
    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
        log.info("[线程池耗尽监控ump-DiscardRejectedPolicy-策略]threadName:{}",r.getClass().getSimpleName());
        super.rejectedExecution(r, e);
    }
}

```
























